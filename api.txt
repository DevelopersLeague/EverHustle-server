################################################################################
################################################################################
#
# productivity app
#
################################################################################
################################################################################

################################################################################

Auth

################################################################################
--------------------------------------------------------------------------------
@route
POST /api/v1/auth/signup

@description
creates a new user and send an email for verification

@req-body
{
    "firstName":"john",
    "lastName":"dove",
    "email":"john.dove@gmail.com",
    "password":"password123",
}

@resp-body
{
    "message":"signup successful confirm email and login",
    "user":{
        "firstName":"john",
        "lastName":"dove",
        "email":"john.dove@gmail.com",
    }
}

@errors
code: 400
    message: email already taken
code: 500
    message: something went wrong

@error-body
{
    "code": <http status code>
    "message":"<an appropriate error message>"
}

--------------------------------------------------------------------------------
@route
POST /api/v1/auth/login

@description
logs in the user

@req-body
{
    "email":"testUser",
    "password":"testPassword"
}

@resp-body
{
    "token":"Bearer ksgkjgklfjgjdfojgdjfsd13i283u4rwefk"
    "user":{
        "firstName":"john",
        "lastName":"dove",
        "email":"john.dove@gmail.com",
    }
}

@errors
code: 500
    message: something went wrong
code: 404
    message: user not found 
code: 401
    message: email is not confirmed
    message: wrong password

--------------------------------------------------------------------------------
@route
GET /api/v1/auth/confirmemail/{JWT}

@note
this route has nothing to do with front end will be used only by the backend

@description
confirm user email

@resp-description
redirect to client login page

--------------------------------------------------------------------------------
################################################################################

Notes

#################################################################################
--------------------------------------------------------------------------------
@route
GET /api/v1/notes

@description
get a list of all the notes by the current user
get list of notes by current user of specific category

@query
category:
    description: get notes of requested category
    url: /api/v1/notes/?category=productivity

@req-header
Authorization: <token>

@resp-body
{
    "notes":[
        {
            "id":"<id of the note>"
            "title":"<title of the note>"
            "content":"<contents of the note>"
            "category":"<category of the note>"
        },
        {
            "id":"<id of the note>"
            "title":"<title of the note>"
            "content":"<contents of the note>"
            "category":"<category of the note>"
        },
    ],
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
@route
GET /api/v1/notes/{id}

@description
get one note by id

@req-header
Authorization: <token>

@resp-body
{
    "note":{
        "id":"<id of the note>"
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@errors
code: 400
    message: invalid id
code: 401
    message: unauthenticated user

--------------------------------------------------------------------------------
@route
POST /api/v1/notes

@description
create a new note

@req-header
Authorization: <token>

@req-body
{
    "note":{
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@resp-body
{
    "note":{
        "id":"<id of the note>"
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
@route
PUT /api/v1/notes/{id}

@description
update a note

@req-header
Authorization: <token>

@req-body
{
    "note":{
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@resp-body
{
    "note":{
        "id":"<id of the note>"
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@errors
code: 401
    message: unauthenticated
code: 400
    message: invalid id

--------------------------------------------------------------------------------
@route
DELETE /api/v1/notes/{id}

@description
delete a note

@req-header
Authorization: <token>

@resp-body
{
    "note":{
        "id":"<id of the note>"
        "title":"<title of the note>"
        "content":"<contents of the note>"
        "category":"<category of the note>"
    }
}

@errors
code: 401
    message: unauthenticated
code: 400
    message: invalid id

--------------------------------------------------------------------------------
################################################################################

Focustime

#################################################################################
--------------------------------------------------------------------------------
@route
POST /api/v1/focustime

@description
records one focus time session

@req-header
Authorization: <token>

@req-body
{
    "date":"<today's date in YYYY-MM-DD format>"
    "time":"<total time focused in HH:MM:SS format>"
}

@resp-body
{
    "date":"<today's date in YYYY-MM-DD format>"
    "time":"<total time focused in HH:MM:SS format>"
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
@route
GET /api/v1/focustime/{date}

@description
returns total focus time for a date (date expected in YYYY-MM-DD format)

@req-header
Authorization: <token>

@resp-body
{
    "date":"<requested date in YYYY-MM-DD format>",
    "time":"<total time for the date in HH:MM:SS format>"
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
################################################################################

Goals

#################################################################################
--------------------------------------------------------------------------------
@route
GET /api/v1/goals

@description
get a list of all the goals by the current user
get list of goals by current user of specific category

@query
category:
    description: get goals of requested category
    url: /api/v1/goals/?category=shortterm
    opttions: shortterm, longterm, daily etc

@req-header
Authorization: <token>

@resp-body
{
    "goals":[
        {
            "id":"<id of the goal>"
            "title":"<title of the goal>"
            "content":"<contents of the goal>"
            "category":"<category of the goal>"
        },
        {
            "id":"<id of the goal>"
            "title":"<title of the goal>"
            "content":"<contents of the goal>"
            "category":"<category of the goal>"
        },
    ],
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
@route
GET /api/v1/goals/{id}

@description
get one goal by id

@req-header
Authorization: <token>

@resp-body
{
    "goal":{
        "id":"<id of the goal>"
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@errors
code: 400
    message: invalid id
code: 401
    message: unauthenticated user

--------------------------------------------------------------------------------
@route
POST /api/v1/goals

@description
create a new goal

@req-header
Authorization: <token>

@req-body
{
    "goal":{
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@resp-body
{
    "goal":{
        "id":"<id of the goal>"
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@errors
code: 401
    message: unauthenticated

--------------------------------------------------------------------------------
@route
PUT /api/v1/goals/{id}

@description
update a goal

@req-header
Authorization: <token>

@req-body (include only the fields to be updates)
{
    "goal":{
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@resp-body
{
    "goal":{
        "id":"<id of the goal>"
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@errors
code: 401
    message: unauthenticated
code: 400
    message: invalid id

--------------------------------------------------------------------------------
@route
DELETE /api/v1/goals/{id}

@description
delete a goal

@req-header
Authorization: <token>

@resp-body
{
    "goal":{
        "id":"<id of the goal>"
        "title":"<title of the goal>"
        "content":"<contents of the goal>"
        "category":"<category of the goal>"
    }
}

@errors
code: 401
    message: unauthenticated
code: 400
    message: invalid id

--------------------------------------------------------------------------------
################################################################################

Reminders

#################################################################################
--------------------------------------------------------------------------------
